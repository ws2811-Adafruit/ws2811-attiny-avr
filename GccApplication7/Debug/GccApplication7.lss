
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000298  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800040  00800040  0000030c  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000a6  00000000  00000000  00000aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ce  00000000  00000000  00000b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002fd  00000000  00000000  00001323  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000643  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001c64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001dd  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a1  00000000  00000000  00001ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000008d  00000000  00000000  00002262  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000090  00000000  00000000  000022ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0a c0       	rjmp	.+20     	; 0x16 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>

00000016 <__ctors_end>:
  16:	11 27       	eor	r17, r17
  18:	1f bf       	out	0x3f, r17	; 63
  1a:	cf e5       	ldi	r28, 0x5F	; 95
  1c:	d0 e0       	ldi	r29, 0x00	; 0
  1e:	de bf       	out	0x3e, r29	; 62
  20:	cd bf       	out	0x3d, r28	; 61

00000022 <__do_clear_bss>:
  22:	10 e0       	ldi	r17, 0x00	; 0
  24:	a0 e4       	ldi	r26, 0x40	; 64
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	01 c0       	rjmp	.+2      	; 0x2c <.do_clear_bss_start>

0000002a <.do_clear_bss_loop>:
  2a:	1d 93       	st	X+, r17

0000002c <.do_clear_bss_start>:
  2c:	a4 34       	cpi	r26, 0x44	; 68
  2e:	b1 07       	cpc	r27, r17
  30:	e1 f7       	brne	.-8      	; 0x2a <.do_clear_bss_loop>
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	2f c1       	rjmp	.+606    	; 0x294 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include "light_ws2812.h"

struct cRGBW led[1];

int main(void)
{
  38:	cf 93       	push	r28
  3a:	df 93       	push	r29
  #ifdef __AVR_ATtiny10__
  CCP=0xD8;		// configuration change protection, write signature
  3c:	88 ed       	ldi	r24, 0xD8	; 216
  3e:	8c bf       	out	0x3c, r24	; 60
  CLKPSR=0;		// set cpu clock prescaler =1 (8Mhz) (attiny 4/5/9/10)
  40:	16 bf       	out	0x36, r17	; 54
  #endif

  while(1)
  {
    led[0].r=128;led[0].g=00;led[0].b=0;led[0].w=0;    // Write red to array
  42:	c0 e4       	ldi	r28, 0x40	; 64
  44:	d0 e0       	ldi	r29, 0x00	; 0
  46:	ce 5f       	subi	r28, 0xFE	; 254
  48:	df 4f       	sbci	r29, 0xFF	; 255
  4a:	e0 e8       	ldi	r30, 0x80	; 128
  4c:	a1 e4       	ldi	r26, 0x41	; 65
  4e:	b0 e0       	ldi	r27, 0x00	; 0
  50:	ec 93       	st	X, r30
  52:	a0 e4       	ldi	r26, 0x40	; 64
  54:	b0 e0       	ldi	r27, 0x00	; 0
  56:	1c 93       	st	X, r17
  58:	18 83       	st	Y, r17
  5a:	e3 e4       	ldi	r30, 0x43	; 67
  5c:	f0 e0       	ldi	r31, 0x00	; 0
  5e:	10 83       	st	Z, r17
    ws2812_setleds_rgbw(led,1);
  60:	8a 2f       	mov	r24, r26
  62:	9b 2f       	mov	r25, r27
  64:	61 e0       	ldi	r22, 0x01	; 1
  66:	70 e0       	ldi	r23, 0x00	; 0
  68:	ab d0       	rcall	.+342    	; 0x1c0 <ws2812_setleds_rgbw>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6a:	8f ef       	ldi	r24, 0xFF	; 255
  6c:	94 e3       	ldi	r25, 0x34	; 52
  6e:	ac e0       	ldi	r26, 0x0C	; 12
  70:	81 50       	subi	r24, 0x01	; 1
  72:	90 40       	sbci	r25, 0x00	; 0
  74:	a0 40       	sbci	r26, 0x00	; 0
  76:	e1 f7       	brne	.-8      	; 0x70 <__stack+0x11>
  78:	00 c0       	rjmp	.+0      	; 0x7a <__stack+0x1b>
  7a:	00 00       	nop
    _delay_ms(500);                                   // wait for 500ms.

    led[0].r=0;led[0].g=128;led[0].b=0;led[0].w=0;    // green
  7c:	a1 e4       	ldi	r26, 0x41	; 65
  7e:	b0 e0       	ldi	r27, 0x00	; 0
  80:	1c 93       	st	X, r17
  82:	80 e8       	ldi	r24, 0x80	; 128
  84:	e0 e4       	ldi	r30, 0x40	; 64
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 83       	st	Z, r24
  8a:	18 83       	st	Y, r17
  8c:	a3 e4       	ldi	r26, 0x43	; 67
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	1c 93       	st	X, r17
    ws2812_setleds_rgbw(led,1);
  92:	8e 2f       	mov	r24, r30
  94:	9f 2f       	mov	r25, r31
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	92 d0       	rcall	.+292    	; 0x1c0 <ws2812_setleds_rgbw>
  9c:	8f ef       	ldi	r24, 0xFF	; 255
  9e:	94 e3       	ldi	r25, 0x34	; 52
  a0:	ac e0       	ldi	r26, 0x0C	; 12
  a2:	81 50       	subi	r24, 0x01	; 1
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	a0 40       	sbci	r26, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <__stack+0x43>
  aa:	00 c0       	rjmp	.+0      	; 0xac <__stack+0x4d>
  ac:	00 00       	nop
    _delay_ms(500);                                   

    led[0].r=0;led[0].g=0;led[0].b=128;led[0].w=0;    // blue
  ae:	a1 e4       	ldi	r26, 0x41	; 65
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	1c 93       	st	X, r17
  b4:	e0 e4       	ldi	r30, 0x40	; 64
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 83       	st	Z, r17
  ba:	f0 e8       	ldi	r31, 0x80	; 128
  bc:	f8 83       	st	Y, r31
  be:	a3 e4       	ldi	r26, 0x43	; 67
  c0:	b0 e0       	ldi	r27, 0x00	; 0
  c2:	1c 93       	st	X, r17
    ws2812_setleds_rgbw(led,1);
  c4:	80 e4       	ldi	r24, 0x40	; 64
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	79 d0       	rcall	.+242    	; 0x1c0 <ws2812_setleds_rgbw>
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	94 e3       	ldi	r25, 0x34	; 52
  d2:	ac e0       	ldi	r26, 0x0C	; 12
  d4:	81 50       	subi	r24, 0x01	; 1
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	a0 40       	sbci	r26, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <__stack+0x75>
  dc:	00 c0       	rjmp	.+0      	; 0xde <__stack+0x7f>
  de:	00 00       	nop
    _delay_ms(500);                                   

    led[0].r=0;led[0].g=0;led[0].b=0;led[0].w=128;    // white
  e0:	a1 e4       	ldi	r26, 0x41	; 65
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	1c 93       	st	X, r17
  e6:	e0 e4       	ldi	r30, 0x40	; 64
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	10 83       	st	Z, r17
  ec:	18 83       	st	Y, r17
  ee:	e0 e8       	ldi	r30, 0x80	; 128
  f0:	a3 e4       	ldi	r26, 0x43	; 67
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	ec 93       	st	X, r30
    ws2812_setleds_rgbw(led,1);
  f6:	80 e4       	ldi	r24, 0x40	; 64
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	60 d0       	rcall	.+192    	; 0x1c0 <ws2812_setleds_rgbw>
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	94 e3       	ldi	r25, 0x34	; 52
 104:	ac e0       	ldi	r26, 0x0C	; 12
 106:	81 50       	subi	r24, 0x01	; 1
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	a0 40       	sbci	r26, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <__stack+0xa7>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <__stack+0xb1>
 110:	00 00       	nop
 112:	9b cf       	rjmp	.-202    	; 0x4a <__SREG__+0xb>

00000114 <ws2812_setleds>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
 114:	26 2f       	mov	r18, r22
 116:	37 2f       	mov	r19, r23
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	62 0f       	add	r22, r18
 11e:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
 120:	0c 9a       	sbi	0x01, 4	; 1
  
  masklo	=~maskhi&ws2812_PORTREG;
 122:	22 b1       	in	r18, 0x02	; 2
 124:	2f 7e       	andi	r18, 0xEF	; 239
  maskhi |=        ws2812_PORTREG;
 126:	32 b1       	in	r19, 0x02	; 2
 128:	30 61       	ori	r19, 0x10	; 16
  
  sreg_prev=SREG;
 12a:	4f b7       	in	r20, 0x3f	; 63
  cli();  
 12c:	f8 94       	cli

  while (datlen--) {
 12e:	61 17       	cp	r22, r17
 130:	71 07       	cpc	r23, r17
 132:	81 f0       	breq	.+32     	; 0x154 <loop54+0x18>
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
 134:	e8 2f       	mov	r30, r24
 136:	f9 2f       	mov	r31, r25
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
    curbyte=*data++;
 138:	81 91       	ld	r24, Z+
    
    asm volatile(
 13a:	98 e0       	ldi	r25, 0x08	; 8

0000013c <loop54>:
 13c:	32 b9       	out	0x02, r19	; 2
 13e:	87 ff       	sbrs	r24, 7
 140:	22 b9       	out	0x02, r18	; 2
 142:	88 0f       	add	r24, r24
 144:	00 00       	nop
 146:	00 c0       	rjmp	.+0      	; 0x148 <loop54+0xc>
 148:	22 b9       	out	0x02, r18	; 2
 14a:	9a 95       	dec	r25
 14c:	b9 f7       	brne	.-18     	; 0x13c <loop54>
 14e:	61 50       	subi	r22, 0x01	; 1
 150:	70 40       	sbci	r23, 0x00	; 0
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
 152:	91 f7       	brne	.-28     	; 0x138 <ws2812_setleds+0x24>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 154:	4f bf       	out	0x3f, r20	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	85 e8       	ldi	r24, 0x85	; 133
 158:	8a 95       	dec	r24
 15a:	f1 f7       	brne	.-4      	; 0x158 <loop54+0x1c>
 15c:	00 00       	nop
 
// Setleds for standard RGB 
void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds)
{
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}
 15e:	08 95       	ret

00000160 <ws2812_setleds_pin>:

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
 160:	df 93       	push	r29
 162:	cf 93       	push	r28
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
 168:	26 2f       	mov	r18, r22
 16a:	37 2f       	mov	r19, r23
 16c:	22 0f       	add	r18, r18
 16e:	33 1f       	adc	r19, r19
 170:	62 0f       	add	r22, r18
 172:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
 174:	21 b1       	in	r18, 0x01	; 1
 176:	24 2b       	or	r18, r20
 178:	21 b9       	out	0x01, r18	; 1
  
  masklo	=~maskhi&ws2812_PORTREG;
 17a:	22 b1       	in	r18, 0x02	; 2
 17c:	34 2f       	mov	r19, r20
 17e:	30 95       	com	r19
 180:	23 23       	and	r18, r19
  maskhi |=        ws2812_PORTREG;
 182:	32 b1       	in	r19, 0x02	; 2
 184:	43 2b       	or	r20, r19
  
  sreg_prev=SREG;
 186:	3f b7       	in	r19, 0x3f	; 63
  cli();  
 188:	f8 94       	cli

  while (datlen--) {
 18a:	61 17       	cp	r22, r17
 18c:	71 07       	cpc	r23, r17
 18e:	81 f0       	breq	.+32     	; 0x1b0 <loop134+0x18>
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
 190:	e8 2f       	mov	r30, r24
 192:	f9 2f       	mov	r31, r25
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
    curbyte=*data++;
 194:	81 91       	ld	r24, Z+
    
    asm volatile(
 196:	98 e0       	ldi	r25, 0x08	; 8

00000198 <loop134>:
 198:	42 b9       	out	0x02, r20	; 2
 19a:	87 ff       	sbrs	r24, 7
 19c:	22 b9       	out	0x02, r18	; 2
 19e:	88 0f       	add	r24, r24
 1a0:	00 00       	nop
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <loop134+0xc>
 1a4:	22 b9       	out	0x02, r18	; 2
 1a6:	9a 95       	dec	r25
 1a8:	b9 f7       	brne	.-18     	; 0x198 <loop134>
 1aa:	61 50       	subi	r22, 0x01	; 1
 1ac:	70 40       	sbci	r23, 0x00	; 0
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
 1ae:	91 f7       	brne	.-28     	; 0x194 <ws2812_setleds_pin+0x34>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 1b0:	3f bf       	out	0x3f, r19	; 63
 1b2:	85 e8       	ldi	r24, 0x85	; 133
 1b4:	8a 95       	dec	r24
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <loop134+0x1c>
 1b8:	00 00       	nop

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
  _delay_us(50);
}
 1ba:	cf 91       	pop	r28
 1bc:	df 91       	pop	r29
 1be:	08 95       	ret

000001c0 <ws2812_setleds_rgbw>:

// Setleds for SK6812RGBW
void inline ws2812_setleds_rgbw(struct cRGBW *ledarray, uint16_t leds)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds<<2,_BV(ws2812_pin));
 1c0:	66 0f       	add	r22, r22
 1c2:	77 1f       	adc	r23, r23
 1c4:	66 0f       	add	r22, r22
 1c6:	77 1f       	adc	r23, r23
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
 1c8:	0c 9a       	sbi	0x01, 4	; 1
  
  masklo	=~maskhi&ws2812_PORTREG;
 1ca:	22 b1       	in	r18, 0x02	; 2
 1cc:	2f 7e       	andi	r18, 0xEF	; 239
  maskhi |=        ws2812_PORTREG;
 1ce:	32 b1       	in	r19, 0x02	; 2
 1d0:	30 61       	ori	r19, 0x10	; 16
  
  sreg_prev=SREG;
 1d2:	4f b7       	in	r20, 0x3f	; 63
  cli();  
 1d4:	f8 94       	cli

  while (datlen--) {
 1d6:	61 17       	cp	r22, r17
 1d8:	71 07       	cpc	r23, r17
 1da:	81 f0       	breq	.+32     	; 0x1fc <loop204+0x18>
}

// Setleds for SK6812RGBW
void inline ws2812_setleds_rgbw(struct cRGBW *ledarray, uint16_t leds)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds<<2,_BV(ws2812_pin));
 1dc:	e8 2f       	mov	r30, r24
 1de:	f9 2f       	mov	r31, r25
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
    curbyte=*data++;
 1e0:	81 91       	ld	r24, Z+
    
    asm volatile(
 1e2:	98 e0       	ldi	r25, 0x08	; 8

000001e4 <loop204>:
 1e4:	32 b9       	out	0x02, r19	; 2
 1e6:	87 ff       	sbrs	r24, 7
 1e8:	22 b9       	out	0x02, r18	; 2
 1ea:	88 0f       	add	r24, r24
 1ec:	00 00       	nop
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <loop204+0xc>
 1f0:	22 b9       	out	0x02, r18	; 2
 1f2:	9a 95       	dec	r25
 1f4:	b9 f7       	brne	.-18     	; 0x1e4 <loop204>
 1f6:	61 50       	subi	r22, 0x01	; 1
 1f8:	70 40       	sbci	r23, 0x00	; 0
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
 1fa:	91 f7       	brne	.-28     	; 0x1e0 <ws2812_setleds_rgbw+0x20>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 1fc:	4f bf       	out	0x3f, r20	; 63
 1fe:	85 ed       	ldi	r24, 0xD5	; 213
 200:	8a 95       	dec	r24
 202:	f1 f7       	brne	.-4      	; 0x200 <loop204+0x1c>
 204:	00 00       	nop
// Setleds for SK6812RGBW
void inline ws2812_setleds_rgbw(struct cRGBW *ledarray, uint16_t leds)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds<<2,_BV(ws2812_pin));
  _delay_us(80);
}
 206:	08 95       	ret

00000208 <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
 208:	0c 9a       	sbi	0x01, 4	; 1
  
  masklo	=~maskhi&ws2812_PORTREG;
 20a:	42 b1       	in	r20, 0x02	; 2
 20c:	4f 7e       	andi	r20, 0xEF	; 239
  maskhi |=        ws2812_PORTREG;
 20e:	32 b1       	in	r19, 0x02	; 2
 210:	30 61       	ori	r19, 0x10	; 16
  
  sreg_prev=SREG;
 212:	ef b7       	in	r30, 0x3f	; 63
  cli();  
 214:	f8 94       	cli

  while (datlen--) {
 216:	61 17       	cp	r22, r17
 218:	71 07       	cpc	r23, r17
 21a:	91 f0       	breq	.+36     	; 0x240 <loop268+0x18>
    curbyte=*data++;
 21c:	a8 2f       	mov	r26, r24
 21e:	b9 2f       	mov	r27, r25
 220:	2d 91       	ld	r18, X+
 222:	8a 2f       	mov	r24, r26
 224:	9b 2f       	mov	r25, r27
    
    asm volatile(
 226:	58 e0       	ldi	r21, 0x08	; 8

00000228 <loop268>:
 228:	32 b9       	out	0x02, r19	; 2
 22a:	27 ff       	sbrs	r18, 7
 22c:	42 b9       	out	0x02, r20	; 2
 22e:	22 0f       	add	r18, r18
 230:	00 00       	nop
 232:	00 c0       	rjmp	.+0      	; 0x234 <loop268+0xc>
 234:	42 b9       	out	0x02, r20	; 2
 236:	5a 95       	dec	r21
 238:	b9 f7       	brne	.-18     	; 0x228 <loop268>
 23a:	61 50       	subi	r22, 0x01	; 1
 23c:	70 40       	sbci	r23, 0x00	; 0
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
 23e:	71 f7       	brne	.-36     	; 0x21c <ws2812_sendarray+0x14>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 240:	ef bf       	out	0x3f, r30	; 63
}

void ws2812_sendarray(uint8_t *data,uint16_t datlen)
{
  ws2812_sendarray_mask(data,datlen,_BV(ws2812_pin));
}
 242:	08 95       	ret

00000244 <ws2812_sendarray_mask>:
#define w_nop4  w_nop2 w_nop2
#define w_nop8  w_nop4 w_nop4
#define w_nop16 w_nop8 w_nop8

void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
 244:	df 93       	push	r29
 246:	cf 93       	push	r28
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
 24c:	21 b1       	in	r18, 0x01	; 1
 24e:	24 2b       	or	r18, r20
 250:	21 b9       	out	0x01, r18	; 1
  
  masklo	=~maskhi&ws2812_PORTREG;
 252:	22 b1       	in	r18, 0x02	; 2
 254:	34 2f       	mov	r19, r20
 256:	30 95       	com	r19
 258:	32 23       	and	r19, r18
  maskhi |=        ws2812_PORTREG;
 25a:	22 b1       	in	r18, 0x02	; 2
 25c:	42 2b       	or	r20, r18
  
  sreg_prev=SREG;
 25e:	ef b7       	in	r30, 0x3f	; 63
  cli();  
 260:	f8 94       	cli

  while (datlen--) {
 262:	61 17       	cp	r22, r17
 264:	71 07       	cpc	r23, r17
 266:	91 f0       	breq	.+36     	; 0x28c <loop322+0x18>
    curbyte=*data++;
 268:	a8 2f       	mov	r26, r24
 26a:	b9 2f       	mov	r27, r25
 26c:	2d 91       	ld	r18, X+
 26e:	8a 2f       	mov	r24, r26
 270:	9b 2f       	mov	r25, r27
    
    asm volatile(
 272:	58 e0       	ldi	r21, 0x08	; 8

00000274 <loop322>:
 274:	42 b9       	out	0x02, r20	; 2
 276:	27 ff       	sbrs	r18, 7
 278:	32 b9       	out	0x02, r19	; 2
 27a:	22 0f       	add	r18, r18
 27c:	00 00       	nop
 27e:	00 c0       	rjmp	.+0      	; 0x280 <loop322+0xc>
 280:	32 b9       	out	0x02, r19	; 2
 282:	5a 95       	dec	r21
 284:	b9 f7       	brne	.-18     	; 0x274 <loop322>
 286:	61 50       	subi	r22, 0x01	; 1
 288:	70 40       	sbci	r23, 0x00	; 0
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
 28a:	71 f7       	brne	.-36     	; 0x268 <ws2812_sendarray_mask+0x24>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
 28c:	ef bf       	out	0x3f, r30	; 63
}
 28e:	cf 91       	pop	r28
 290:	df 91       	pop	r29
 292:	08 95       	ret

00000294 <_exit>:
 294:	f8 94       	cli

00000296 <__stop_program>:
 296:	ff cf       	rjmp	.-2      	; 0x296 <__stop_program>
